
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TypeDisplayFrame.java
 *
 * Created on 2 Jul, 2011, 2:09:28 AM
 */
/**
 *
 * @author bala
 */
public class TypeDisplayFrame extends javax.swing.JFrame implements Serializable {

    int selectedRow;
    //marker if any row has been selected for loading,editing ;
    boolean selected = false;
    private ReadingEntryPanel entryPanel;
    /** Creates new form TypeDisplayFrame */
    private static int ID_COL = 0;
    private static int TYPE_COL = 1;
    private static int HP_COL = 2;
    private static int KW_COL = 3;
    private static int DEL_SIZE_COL = 4;
    private static int DISCH_COL = 5;
    private static int HEAD_COL = 6;
    private static int EFF_COL = 7;
    private static int CURR_COL = 8;
    private static int HEAD_LOWER_COL = 9;
    private static int HEAD_UPPER_COL = 10;
    private static int PHASE_COL = 11;
    private static int VOLTAGE_COL = 12;

    public TypeDisplayFrame() {




        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        typesTable = new javax.swing.JTable();
        selectedIDField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        typesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                   
                },
                new String[]{
                    "ID", "Type", "H.P.", "kW", "Del.size,mm", "Disch. , lps", "TotalHead,mWC", "OA Eff. , %", "Max.Current ,A", "HeadLower,mWC", "HeadUpper,mWC", "Phase", "Voltage,V"
                }) {

            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        typesTable.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(typesTable);

        selectedIDField.setPreferredSize(new java.awt.Dimension(80, 28));

        jLabel1.setText("");

        editButton.setText("Close");
        editButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                TypeDisplayFrame.this.dispose();
            }
        });
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Start editing  a row by clicking on it.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1110, Short.MAX_VALUE).addContainerGap()).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addGap(32, 32, 32).addComponent(selectedIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(184, 184, 184).addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(84, 84, 84).addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(84, 84, 84).addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE).addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(28, 28, 28)).addGroup(layout.createSequentialGroup().addComponent(jLabel2).addContainerGap(323, Short.MAX_VALUE)))));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(22, 22, 22).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(selectedIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1).addComponent(editButton).addComponent(deleteButton).addComponent(saveButton).addComponent(loadButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE).addComponent(jLabel2).addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typesTableMouseClicked
      
    }//GEN-LAST:event_typesTableMouseClicked

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        if (entryPanel == null) {
            return;
        }
        System.out.println("At load button action display frame");
        int row = typesTable.getSelectedRow();
        System.out.println(" selected row is  " + row);
        entryPanel.getPumpTypeField().setText(typesTable.getValueAt(row, TYPE_COL).toString());
        entryPanel.getRatingField().setText(typesTable.getValueAt(row, TYPE_COL).toString());
        entryPanel.getRatingField().setText(typesTable.getValueAt(row, KW_COL).toString() + " / "
                + typesTable.getValueAt(row, HP_COL).toString());
        entryPanel.getDelSizeField().setText(typesTable.getValueAt(row, DEL_SIZE_COL).toString());
        entryPanel.getDischField().setText(typesTable.getValueAt(row, DISCH_COL).toString());
        entryPanel.getHeadField().setText(typesTable.getValueAt(row, HEAD_COL).toString());
        entryPanel.getEffField().setText(typesTable.getValueAt(row, EFF_COL).toString());
        entryPanel.getCurrField().setText(typesTable.getValueAt(row, CURR_COL).toString());


        entryPanel.gethRangeLwrField().setText(typesTable.getValueAt(row, HEAD_LOWER_COL).toString());
        entryPanel.gethRangeUprField().setText(typesTable.getValueAt(row, HEAD_UPPER_COL).toString());
        entryPanel.getPhaseField().setText(typesTable.getValueAt(row, PHASE_COL).toString());
        entryPanel.getVoltField().setText(typesTable.getValueAt(row, VOLTAGE_COL).toString());
        //entryPanel.getCurrField().setText(null);7



    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int row = typesTable.getSelectedRow();
        int gotID = Integer.parseInt(typesTable.getValueAt(row, 0).toString());
        Session session = null;

        try {

            SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
            session = sessionFactory.openSession();
            //Create new instance of Contact and set0
            Transaction tx = session.beginTransaction();


            PumpType type = (PumpType) session.get(PumpType.class, gotID);
            type.setType((typesTable.getValueAt(row, this.TYPE_COL)).toString().replace(" ",""));
            type.setHp(Double.parseDouble(typesTable.getValueAt(row, this.HP_COL).toString()));
            type.setkW(Double.parseDouble(typesTable.getValueAt(row, this.KW_COL).toString()));
            type.setDelSize(Double.parseDouble(typesTable.getValueAt(row, this.DEL_SIZE_COL).toString()));

            type.setDischarge(Double.parseDouble(typesTable.getValueAt(row, DISCH_COL).toString()));
            type.setHead(Double.parseDouble(typesTable.getValueAt(row, this.HEAD_COL).toString()));
            type.setEff(Double.parseDouble(typesTable.getValueAt(row, this.EFF_COL).toString()));
            type.setCurrent(Double.parseDouble(typesTable.getValueAt(row, this.CURR_COL).toString()));
            type.setLowerHead(Double.parseDouble(typesTable.getValueAt(row, this.HEAD_LOWER_COL).toString()));
            //type.setUpperHead(Double.parseDouble(typesTable.getValueAt(row, this.HEAD_LOWER_COL).toString()));
            type.setUpperHead(Double.parseDouble(typesTable.getValueAt(row, this.HEAD_UPPER_COL).toString()));
            type.setPhases(Integer.parseInt(typesTable.getValueAt(row, this.PHASE_COL).toString()));
            type.setVoltage(Integer.parseInt(typesTable.getValueAt(row, this.VOLTAGE_COL).toString()));
            session.update(type);
            tx.commit();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }





    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = typesTable.getSelectedRow();
        int gotID = Integer.parseInt(typesTable.getValueAt(row, 0).toString());
        Session session = null;
 System.out.println("Inside TypeDisplayFrame.deleteButtonActionPerformed(ActionEvent ae)");
        try {
             System.out.println("Inside TypeDisplayFrame.deleteButtonActionPerformed(ActionEvent ae)");
            SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
            session = sessionFactory.openSession();
            //Create new instance of Contact and set0
            Transaction tx = session.beginTransaction();
            int choice = JOptionPane.showConfirmDialog(this, "Do you really want to delete this type record?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.NO_OPTION) {
                return;
            }

            PumpType type = (PumpType) session.get(PumpType.class, gotID);

            session.delete(type);
            tx.commit();


        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }

        this.getTypeValuesAndDisplay();




    }//GEN-LAST:event_deleteButtonActionPerformed

    public void getTypeValuesAndDisplay() {
         typesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                   
                },
                new String[]{
                    "ID", "Type", "H.P.", "kW", "Del.size,mm", "Disch. , lps", "TotalHead,mWC", "OA Eff. , %", "Max.Current ,A", "HeadLower,mWC", "HeadUpper,mWC", "Phase", "Voltage,V"
                }) {

            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        Session session = null;

        try {
            // Class.forName("org.hsqldb.jdbc.JDBCDriver");
            //String url = "jdbc:hsqldb:file:typesdb";
            //Connection conn = DriverManager.getConnection(url, "app", "");
            //Statement stmt = conn.createStatement();
            SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
            session = sessionFactory.openSession();
            //Create new instance of Contact and set0
            Transaction tx = session.beginTransaction();
            Query q = session.createQuery("from PumpType type");
            List list = q.list();
            int i = 0;
            //PumpType t = (PumpType) session.get(PumpType.class, 2);
            //if(t== null) return;
            // System.out.println("My voltage is " + t.getVoltage() + " Volts");
            Object[][] data = new Object[list.size()][13];
            for (Object ob : list) {
                // System.out.println("My name is "+ob.getClass().getName());
                PumpType type = (PumpType) ob;
                // System.out.println("My id   is "+type.getId());
                data[i][ID_COL] = type.getId();
                data[i][TYPE_COL] = type.getType();
                data[i][HP_COL] = type.getHp();
                data[i][KW_COL] = type.getkW();
                data[i][DEL_SIZE_COL] = type.getDelSize();
                data[i][DISCH_COL] = type.getDischarge();
                data[i][HEAD_COL] = type.getHead();
                data[i][EFF_COL] = type.getEff();
                data[i][CURR_COL] = type.getCurrent();
                data[i][HEAD_LOWER_COL] = type.getLowerHead();
                data[i][HEAD_UPPER_COL] = type.getUpperHead();
                data[i][PHASE_COL] = type.getPhases();
                data[i][VOLTAGE_COL] = type.getVoltage();
                i++;
            }

            displayTable(data);
            tx.commit();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }





    }

    private void displayTable(Object[][] data) {

        for (int i = 0; i < typesTable.getRowCount(); i++) {
            for (int j = 0; j < typesTable.getColumnModel().getColumnCount(); j++) {
                typesTable.setValueAt(" ", i, j);
            }
        }
        int rows = data.length;
if (rows==0)return;
        int cols = data[0].length;

        for (int i = 0; i < rows; i++) {
            if (i + 1 > typesTable.getRowCount()) {
                ((DefaultTableModel) (typesTable.getModel())).addRow(data[i]);
            }
            for (int j = 0; j < cols; j++) {
                typesTable.setValueAt(data[i][j], i, j);
            }
        }
        typesTable.validate();
        this.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TypeDisplayFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField selectedIDField;
    private javax.swing.JTable typesTable;
    // End of variables declaration//GEN-END:variables

    /**
     * @param entryPanel the entryPanel to set
     */
    public void setEntryPanel(ReadingEntryPanel entryPanel) {
        this.entryPanel = entryPanel;
    }
}
