
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VarReportOptionsFrame.java
 *
 * Created on Jul 28, 2011, 1:25:27 PM
 */
/**
 *
 * @author Administrator
 */
public class VarReportOptionsFrame extends javax.swing.JFrame {
//For  Table in Frame

    private int filledRows;
    public static final int TABLE_NO_COL = 0;
    public static final int TABLE_TYPE_COL = 1;
    public static final int SELECTION_COL = 2;
//For Generated Excel report    
    public static final int PERIOD_ROW = 6;
    public static final int PERIOD_COL = 3;
    public static final int DATE_ROW = 2;
    public static final int DATE_COL =11;
    public static final int TYPE_COL = 1;
    public static final int DISCH_DECL_COL = 2;
    public static final int HEAD_DECL_COL = 3;
    public static final int EFF_DECL_COL = 4;
    public static final int CURR_DECL_COL = 5;
    public static final int DISCH_MAX_COL = 6;
    public static final int DISCH_MIN_COL = 7;
    public static final int HEAD_MAX_COL = 8;
    public static final int HEAD_MIN_COL = 9;
    public static final int EFF_MAX_COL = 10;
    public static final int EFF_MIN_COL = 11;
    public static final int CURR_MAX_COL = 12;
    public static final int CURR_MIN_COL = 13;

    /** Creates new form VarReportOptionsFrame */
    public VarReportOptionsFrame() {
        initComponents();
        getAndDisplayAllTypes();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        typesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        reportButton = new javax.swing.JButton();
        reportDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("From Date : ");

        fromDateChooser.setDateFormatString("dd-MM-yyyy");

        jLabel2.setText("Upto  Date : ");

        toDateChooser.setDateFormatString("dd-MM-yyyy");

        typesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)},
                {null, null, new Boolean(false)}
            },
            new String [] {
                "No", "Type", "Selected"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(typesTable);

        jLabel3.setText("Select  the types to  be included in the report :");

        reportButton.setText("Generate Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Report  Date :  ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reportDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(76, 76, 76)
                        .addComponent(reportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reportButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(reportDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        WritableWorkbook copy = null;
        Date fromDate = this.fromDateChooser.getDate();
        Date toDate = this.toDateChooser.getDate();
        int firstRow = 10;
        String[] types = new String[100];
        int j = 0;
        for (int i = 0; i < filledRows; i++) {
            if ((Boolean) typesTable.getValueAt(i, VarReportOptionsFrame.SELECTION_COL) == true) {
                types[j] = (String) typesTable.getValueAt(i, VarReportOptionsFrame.TABLE_TYPE_COL);
                j++;
            }

        }
        try {
            SessionFactory sessions = HibernateUtil.getSessionFactory();
            Session session = sessions.openSession();
            // Query query = session.createQuery("from SavableObservedValues values where values.date between :start and :end ");
            //query.setParameter("start", fromDate);
            //query.setParameter("end", toDate);
            //System.out.println(query.list().get(0));
            Query query = null;
            File in = new File("MaxMinSub.xls");
            File out = new File("MaxMinSubFilled.xls");
            Workbook wb = Workbook.getWorkbook(in);
            copy = Workbook.createWorkbook(out, wb);
            WritableSheet sheet = copy.getSheet(0);
            //j is the actual numberof types for the report.

            for (int k = 0; k < j; k++) {
                Label lbl = new Label(this.TYPE_COL, firstRow + k, types[k]);
                sheet.addCell(lbl);
                String hql = "from PumpType t where t.type = :ptype";
                query = session.createQuery(hql);
                query.setParameter("ptype", types[k]);
                PumpType pt = (PumpType) query.list().get(0);
                lbl = new Label(this.DISCH_DECL_COL, firstRow + k, String.format("%.2f", pt.getDischarge()));
                sheet.addCell(lbl);
                lbl = new Label(this.HEAD_DECL_COL, firstRow + k, String.format("%.2f", pt.getHead()));
                sheet.addCell(lbl);
                lbl = new Label(this.EFF_DECL_COL, firstRow + k, String.format("%.2f", pt.getEff()));
                sheet.addCell(lbl);
                lbl = new Label(this.CURR_DECL_COL, firstRow + k, String.format("%.2f", pt.getCurrent()));
                sheet.addCell(lbl);
                hql = "select max(values.disch) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.DISCH_MAX_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select min(values.disch) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.DISCH_MIN_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);

                hql = "select max(values.head) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.HEAD_MAX_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select min(values.head) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.HEAD_MIN_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select max(values.eff) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.EFF_MAX_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select min(values.eff) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.EFF_MIN_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select max(values.current) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.CURR_MAX_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);
                hql = "select min(values.current) from SavableObservedValues values where values.date between :start and :end and values.type = :thetype";
                query = session.createQuery(hql);
                query.setParameter("start", fromDate);
                query.setParameter("end", toDate);
                query.setParameter("thetype", types[k]);
                lbl = new Label(this.CURR_MIN_COL, firstRow + k, String.format("%.2f", query.list().get(0)));
                sheet.addCell(lbl);

            }
            session.close();
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            String dateFromString = formatter.format(fromDate);
            String dateToString = formatter.format(toDate);
            String per = "Period from  " + dateFromString + "  upto  " + dateToString;

            Label lbl = new Label(this.PERIOD_COL, this.PERIOD_ROW, per);
            sheet.addCell(lbl);
            String dateString = formatter.format(reportDateChooser.getDate());
            String repDate = "Date : " + dateString;
            lbl = new Label(this.DATE_COL, this.DATE_ROW, repDate);
            sheet.addCell(lbl);


            copy.write();
            copy.close();
            String fileName = "MaxMinSubFilled.xls";
            String[] commands = {"cmd", "/c", "start", "\"DummyTitle\"", fileName};//
            Runtime.getRuntime().exec(commands);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_reportButtonActionPerformed

    private void getAndDisplayAllTypes() {
        SessionFactory sessions = HibernateUtil.getSessionFactory();
        Session session = sessions.openSession();
        Transaction tx = session.beginTransaction();
        Query query = session.createQuery("select t.type from PumpType t");

        List list = query.list();

        Object[][] data = new Object[list.size()][this.typesTable.getColumnCount()];
        int i = 0;
        for (Object ob : list) {
            // SavableObservedValues values = (SavableObservedValues) ob;
            data[i][TABLE_NO_COL] = i + 1;
            data[i][TABLE_TYPE_COL] = ((String) ob).replace(" ", "");
            data[i][this.SELECTION_COL] = true;
            i++;
        }
        this.displayTable(data);
    }

    private void displayTable(Object[][] data) {

        for (int i = 0; i < typesTable.getRowCount(); i++) {
            //have to neglect final column; cannot set  set " " for boolean column
            for (int j = 0; j < typesTable.getColumnModel().getColumnCount() - 1; j++) {
                typesTable.setValueAt(" ", i, j);
            }
        }
        int rows = data.length;
       if (rows==0) return;
        filledRows = rows;
        int cols = data[0].length;

        for (int i = 0; i < rows; i++) {
            if (i + 1 > typesTable.getRowCount()) {
                ((DefaultTableModel) (typesTable.getModel())).addRow(data[i]);
            }
            for (int j = 0; j < cols; j++) {
                typesTable.setValueAt(data[i][j], i, j);
            }
        }
        typesTable.validate();
        this.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VarReportOptionsFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reportButton;
    private com.toedter.calendar.JDateChooser reportDateChooser;
    private com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JTable typesTable;
    // End of variables declaration//GEN-END:variables
}
