
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ObsValuesFrame.java
 *
 * Created on Jul 28, 2011, 1:06:53 PM
 */
/**
 *
 * @author Administrator
 */
public class ObsValuesFrame extends javax.swing.JFrame {

    private static int NO_COL = 0;
    private static int ID_COL = 1;
    private static int TYPE_COL = 2;
    private static int SLNO_COL = 3;
    private static int DATE_COL = 4;
    private static int DISCH_COL = 5;
    private static int HEAD_COL = 6;
    private static int EFF_COL = 7;
    private static int CURR_COL = 8;

    /** Creates new form ObsValuesFrame */
    public ObsValuesFrame() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        valuesTable = new javax.swing.JTable();
        resetButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        generateReportButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Observed Values");

        valuesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "ID", "Type", "S.No.", "Date", "Disch", "Head", "OAEff", "Max. Current"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(valuesTable);

        resetButton.setText("Reset");
        resetButton.setToolTipText("Delete every thing in the observed values table of the database.");

        deleteButton.setText("Delete Row");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setToolTipText("Save the edited value of particular row");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        generateReportButton.setText("Generate Variation Report");
        generateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(refreshButton)
                .addGap(47, 47, 47)
                .addComponent(resetButton)
                .addGap(87, 87, 87)
                .addComponent(deleteButton)
                .addGap(79, 79, 79)
                .addComponent(saveButton)
                .addContainerGap(155, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(368, Short.MAX_VALUE)
                .addComponent(generateReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(deleteButton)
                    .addComponent(saveButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(generateReportButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportButtonActionPerformed
        VarReportOptionsFrame f = new VarReportOptionsFrame();
        f.setVisible(true);

    }//GEN-LAST:event_generateReportButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        int row = valuesTable.getSelectedRow();
        int gotID = Integer.parseInt(valuesTable.getValueAt(row, this.ID_COL).toString());
        Session session = null;

        try {

            SessionFactory sessions = HibernateUtil.getSessionFactory();
            session = sessions.openSession();
            //Create new instance of Contact and set0
            Transaction tx = session.beginTransaction();


            SavableObservedValues values = (SavableObservedValues) session.get(SavableObservedValues.class, gotID);
            values.setType((valuesTable.getValueAt(row, this.TYPE_COL)).toString().replace(" ", ""));
            values.setsNo((valuesTable.getValueAt(row, this.SLNO_COL)).toString().replace(" ", ""));
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            String dateString = formatter.format(values.getDate());
            Date date = formatter.parse((String) valuesTable.getValueAt(row, this.DATE_COL));
            values.setDate(date);
            values.setDisch(Double.parseDouble(valuesTable.getValueAt(row, DISCH_COL).toString()));
            values.setHead(Double.parseDouble(valuesTable.getValueAt(row, this.HEAD_COL).toString()));
            values.setEff(Double.parseDouble(valuesTable.getValueAt(row, this.EFF_COL).toString()));
            values.setMcurrent(Double.parseDouble(valuesTable.getValueAt(row, this.CURR_COL).toString()));

            session.update(values);
            tx.commit();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }




    }//GEN-LAST:event_saveButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.displayAllValues();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        System.out.println("Delete method in obsvalues Frame");
        int row = valuesTable.getSelectedRow();
        Session session = null;
        int gotID = Integer.parseInt(valuesTable.getValueAt(row, this.ID_COL).toString());
        try {

            SessionFactory sessions = HibernateUtil.getSessionFactory();
            session = sessions.openSession();
            Transaction tx = session.beginTransaction();
            SavableObservedValues values = (SavableObservedValues) session.get(SavableObservedValues.class, gotID);
            session.delete(values);
            tx.commit();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }
        this.displayAllValues();
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void saveValues(PumpValues observedValues) {
        Session session = null;
        try {
            SessionFactory sessions = HibernateUtil.getSessionFactory();
            session = sessions.openSession();
            Transaction tx = session.beginTransaction();
            SavableObservedValues values = new SavableObservedValues();
            values.setsNo(observedValues.getsNo());
            values.setType(observedValues.getType().replace(" ", ""));
            values.setDate(observedValues.getDate());
            values.setDisch(observedValues.getDischarge());
            values.setHead(observedValues.getHead());
            values.setEff(observedValues.getEfficiency());
            values.setMcurrent(observedValues.getMaxCurrent());
            session.save(values);
            tx.commit();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            session.flush();
            session.close();
        }

    }

    public void displayAllValues() {
        SessionFactory sessions = HibernateUtil.getSessionFactory();
        Session session = sessions.openSession();
        Transaction tx = session.beginTransaction();
        Query query = session.createQuery("from SavableObservedValues values");
        List list = query.list();

        Object[][] data = new Object[list.size()][this.valuesTable.getColumnCount()];
        int i = 0;
        for (Object ob : list) {
            SavableObservedValues values = (SavableObservedValues) ob;
            data[i][NO_COL] = i + 1;
            data[i][ID_COL] = values.getId();
            data[i][TYPE_COL] = values.getType().replace(" ", "");
            data[i][SLNO_COL] = values.getsNo();
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            String dateString = formatter.format(values.getDate());
            data[i][DATE_COL] = dateString;
            data[i][DISCH_COL] = String.format("%.2f", values.getDisch());
            data[i][HEAD_COL] = String.format("%.2f", values.getHead());
            data[i][EFF_COL] = String.format("%.2f", values.getEff());
            data[i][CURR_COL] = String.format("%.2f", values.getMcurrent());
            i++;

        }
        this.displayTable(data);

    }

    private void displayTable(Object[][] data) {

        for (int i = 0; i < valuesTable.getRowCount(); i++) {
            for (int j = 0; j < valuesTable.getColumnModel().getColumnCount(); j++) {
                valuesTable.setValueAt(" ", i, j);
            }
        }
        int rows = data.length;
        int cols = data[0].length;

        for (int i = 0; i < rows; i++) {
            if (i + 1 > valuesTable.getRowCount()) {
                ((DefaultTableModel) (valuesTable.getModel())).addRow(data[i]);
            }
            for (int j = 0; j < cols; j++) {
                valuesTable.setValueAt(data[i][j], i, j);
            }
        }
        valuesTable.validate();
        this.repaint();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ObsValuesFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton generateReportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable valuesTable;
    // End of variables declaration//GEN-END:variables
}
